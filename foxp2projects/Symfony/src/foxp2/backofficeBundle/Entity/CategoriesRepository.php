<?php

namespace foxp2\backofficeBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use RecursiveIteratorIterator;


/**
 * categoriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoriesRepository extends EntityRepository
{
    public function getCategoriesIterate() 
    {
        $catlist = array();
        $categories = $this->getEntityManager()->getRepository('foxp2backofficeBundle:Categories')->findBy(array('parentId' => null));        
        $collection = new ArrayCollection($categories);
        $category_iterator = new RecursiveCategoryIterator($collection);
        $recursive_iterator = new RecursiveIteratorIterator($category_iterator, RecursiveIteratorIterator::SELF_FIRST);

        foreach ($recursive_iterator as  $children)
        {
            $catlist[$children->getId()] = str_repeat('-', $recursive_iterator->getDepth()) . '-' .$children->getCategoriesName();           
        } 
        return $catlist;
        
    }
    
    public function getCategoriesList()
    {
        $qb = $this->createQueryBuilder('c');        
            $qb->select('c');        
            $qb->expr()->abs('c.level');
            $qb->add('orderBy' ,'c.level');        
        return $qb;
    }
    
    public function getAllCategoriesList($categories_per_page, $offset)
    {
        $qb = $this->createQueryBuilder('c');        
            $qb->select('c');
            $qb->expr()->abs('c.level');
            $qb->add('orderBy' ,'c.level');        
            $qb->setFirstResult($offset);
            $qb->setMaxResults($categories_per_page);
        return $qb->getQuery()->getResult();
    }
    
    public function findCategoryByName($keyword)
    {
        $qb = $this->createQueryBuilder('c');        
            $qb->select('c');     
            $qb->andWhere($qb->expr()->like('c.categoriesName',  $qb->expr()->literal($keyword.'%')));
            $qb->expr()->abs('c.level');
            $qb->add('orderBy' ,'c.level');
        return $qb->getQuery()->getResult();
    }
    
    public function ajaxCategoryByid($id)
    {        
        $qb = $this->createQueryBuilder('c');        
            $qb->select('c');     
            $qb->add('where','c.id =' .$id);
        return $qb->getQuery()->getResult();        
    }
    
    public function getCategoriesCount()
    {
        $qb = $this->createQueryBuilder('c');
        return  $qb->select('count(c.id)')->getQuery()->getSingleScalarResult();       
    }
}
